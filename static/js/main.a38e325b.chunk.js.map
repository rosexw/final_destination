{"version":3,"sources":["cycle.js","App.js","serviceWorker.js","index.js"],"names":["cycle","curr","imove","start","end","length","Array","from","_","i","newCurr","Error","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","min","max","current","moves","result","error","handleMinChange","bind","assertThisInitialized","handleMaxChange","handleCurrentChange","handleMovesChange","handleSubmit","event","setState","target","value","preventDefault","_this$state","parseInt","message","react_default","a","createElement","className","onSubmit","type","name","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a38e325b.chunk.js","sourcesContent":["\nfunction cycle (curr, imove, start, end) {\n    const length = end - start + 1;\n    const range = Array.from({ length }, (_, i) => start + i);\n    if (curr >= start && curr <= end) {\n        let newCurr = curr + imove;\n        while (newCurr > end) {\n           newCurr = newCurr-length;            \n        }\n        while (newCurr < start) {\n            newCurr = newCurr+length;\n        }\n        return newCurr;\n    } else {\n        throw new Error(\"Error! This number is out of range!\");\n    }\n};\n\nexport default cycle;","import React, { Component } from 'react';\nimport './App.css';\nimport cycle from './cycle.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      min: '',\n      max: '',\n      current: '',\n      moves: '',\n      result: null,\n      error: null,\n    };\n\n    this.handleMinChange = this.handleMinChange.bind(this);\n    this.handleMaxChange = this.handleMaxChange.bind(this);\n    this.handleCurrentChange = this.handleCurrentChange.bind(this);\n    this.handleMovesChange = this.handleMovesChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleMinChange(event) {\n    this.setState({\n      min: event.target.value,\n    });\n  }\n\n  handleMaxChange(event) {\n    this.setState({\n      max: event.target.value,\n    });\n  }\n\n  handleCurrentChange(event) {\n    this.setState({\n      current: event.target.value,\n    });\n  }\n\n  handleMovesChange(event) {\n    this.setState({\n      moves: event.target.value,\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    // alert('The min number : ' + this.state.min + '\\n The max number is: ' + this.state.max + '\\n The current number is: ' + this.state.current +'\\n The number of moves we should make is: ' + this.state.moves);\n    const {current, moves, min, max} = this.state;\n\n    try {\n      const result = cycle(parseInt(current, 10), parseInt(moves, 10), parseInt(min, 10), parseInt(max, 10));\n      this.setState({\n        result,\n        error: null,\n      })\n    }\n    catch(error) {\n      this.setState({\n        result: null,\n        error: error.message,\n      })\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Final Destination</h1>\n        </header>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <label>\n              What is the lowest position?\n              <input type=\"number\" name=\"start\" value={this.state.min} onChange={this.handleMinChange} />\n            </label>\n          </p>\n          <p>\n            <label>\n              What is the highest position? \n              <input type=\"number\" name=\"end\" value={this.state.max} onChange={this.handleMaxChange} />\n            </label>\n          </p>\n          <p>\n            <label>\n              What is your current position? \n              <input type=\"number\" name=\"current\" value={this.state.current} onChange={this.handleCurrentChange} />\n            </label>\n          </p>\n          <p>\n            <label>\n              How many steps would you like to move? \n              <input type=\"number\" name=\"moves\" value={this.state.moves} onChange={this.handleMovesChange} />\n            </label>\n          </p>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n\n        <div className=\"error\">\n          {\n            this.state.error && \n              <h2>\n                {this.state.error}\n              </h2>\n          }\n        </div>\n        <div className=\"result\">\n          {\n            this.state.result !== null &&\n              <h2>\n                Your final position is {this.state.result}.\n              </h2>\n          }\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}